import os

env = Environment(CC='i686-elf-gcc',
	AS='i686-elf-as',
	
	CCFLAGS = '-ffreestanding -std=gnu99 -O2 -Wall -Wextra',
	CPPPATH=['.', 'lib'],
	ENV = {'PATH' : os.environ['PATH']})


source = Split("""
core.c
memory.c
terminal.c
util/mini-printf.c
util/stack.c
lib/string.c
lib/libc.c
lib/setjmp_32.asm
boot.asm
""")

lua_source = Split("""
lua/lapi.c
lua/lauxlib.c
lua/lbaselib.c
lua/lbitlib.c
lua/lcode.c
lua/lcorolib.c
lua/lctype.c
lua/ldblib.c
lua/ldebug.c
lua/ldo.c
lua/ldump.c
lua/lfunc.c
lua/lgc.c
lua/linit.c
#lua/liolib.c
lua/llex.c
lua/lmathlib.c
lua/lmem.c
lua/loadlib.c
lua/lobject.c
lua/lopcodes.c
lua/loslib.c
lua/lparser.c
lua/lstate.c
lua/lstring.c
lua/lstrlib.c
lua/ltable.c
lua/ltablib.c
lua/ltm.c
#lua/lua.c
lua/luac.c
lua/lundump.c
lua/lvm.c
lua/lzio.c
""")

object = env.Object(source = [source]) #, lua_source])
core = env.Program(target = 'p11-core', LINKFLAGS = '-T linker.ld -nostdlib -ffreestanding -O2 -Wall -Wextra', source = object)

